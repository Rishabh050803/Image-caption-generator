"""
Django settings for caption_backend project.

Generated by 'django-admin startproject' using Django 5.1.4.
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from the .env file located in the parent directory (caption_backend/)
load_dotenv(dotenv_path=BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# SECURITY WARNING: keep the secret key used in production secret!
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "t")
SECRET_KEY = os.getenv("SECRET_KEY", "fallback-secret-key")
ALLOWED_HOSTS = ["*"]
# Application definition

INSTALLED_APPS = [
    # Django built-ins
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for django-allauth

    # REST framework
    'rest_framework',
    'rest_framework.authtoken',

    # Authentication
    'dj_rest_auth',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    'dj_rest_auth.registration',

    # Your existing apps
    'corsheaders',
    'api',

    # Add your app config
    'caption_backend.apps.CaptionBackendConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Required for allauth
]

ROOT_URLCONF = 'caption_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'caption_backend.wsgi.application'

# Database Configuration with Fallback
import time
from django.db.utils import OperationalError

# Try to use the configured database URL first
database_url = os.getenv("DATABASE_URL")

# If no DATABASE_URL provided, default to SQLite
if not database_url:
    print("Warning: No DATABASE_URL environment variable set, defaulting to SQLite")
    database_url = f"sqlite:///{os.path.join(str(BASE_DIR), 'db.sqlite3')}"

# Configure database with error handling
try:
    # Attempt to parse the DATABASE_URL
    db_config = dj_database_url.parse(
        database_url,
        conn_max_age=600,
    )
    
    # Only apply SSL settings for PostgreSQL
    if db_config.get('ENGINE') == 'django.db.backends.postgresql':
        db_config['OPTIONS'] = {'sslmode': 'require'} if not DEBUG else {}
        
        # Test the connection with a short timeout
        if DEBUG:
            import psycopg2
            try:
                print(f"Testing connection to PostgreSQL at {db_config.get('HOST')}...")
                conn = psycopg2.connect(
                    dbname=db_config.get('NAME', ''),
                    user=db_config.get('USER', ''),
                    password=db_config.get('PASSWORD', ''),
                    host=db_config.get('HOST', ''),
                    port=db_config.get('PORT', 5432),
                    connect_timeout=5  # 5 second timeout for quick failure
                )
                conn.close()
                print("PostgreSQL connection successful")
            except (psycopg2.OperationalError, Exception) as e:
                print(f"PostgreSQL connection failed: {e}")
                print("Falling back to SQLite for local development")
                # Fall back to SQLite
                db_config = {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': os.path.join(str(BASE_DIR), 'db.sqlite3'),
                }
    
    # Set the database configuration
    DATABASES = {'default': db_config}
except Exception as e:
    print(f"Error configuring database: {e}")
    print("Falling back to SQLite")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(str(BASE_DIR), 'db.sqlite3'),
        }
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "https://captionit-gray.vercel.app",
    "http://localhost:3000",
    "http://localhost:3001",
]
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Allow all origins in development
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']
CORS_ALLOW_METHODS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS']
# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    "https://captionit-gray.vercel.app",
    "http://localhost:3000",
    "http://localhost:3001",
]
CSRF_COOKIE_SAMESITE = 'Lax'  # Use 'Lax' for development, 'None' only for production with HTTPS
CSRF_COOKIE_SECURE = False    # Set to True ONLY if using HTTPS, which is not typical in dev
SESSION_COOKIE_SAMESITE = 'Lax'  
SESSION_COOKIE_SECURE = False  # Set to True ONLY if using HTTPS

# For production only (when using HTTPS)
if not DEBUG:  # In production
    CSRF_COOKIE_SAMESITE = 'None'
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SAMESITE = 'None'
    SESSION_COOKIE_SECURE = True

# Site settings
SITE_ID = int(os.getenv("SITE_ID", 1))
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:3000")

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    ],
}

# JWT settings
REST_USE_JWT = True
JWT_AUTH_COOKIE = 'auth-token'
JWT_AUTH_REFRESH_COOKIE = 'auth-refresh-token'
JWT_AUTH_SECURE = False  # Set to True in production

# DJ Rest Auth Settings
REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'auth-token',
    'JWT_AUTH_REFRESH_COOKIE': 'refresh-token',
    'JWT_AUTH_SECURE': True,
    'JWT_AUTH_SAMESITE': 'None',
    'JWT_AUTH_HTTPONLY': False,  # For easier development - set to True in production
    'USER_DETAILS_SERIALIZER': 'dj_rest_auth.serializers.UserDetailsSerializer',
    'REGISTER_SERIALIZER': 'caption_backend.serializers.CustomRegisterSerializer',
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'caption_backend.serializers.CustomRegisterSerializer',
}

# AllAuth settings
ACCOUNT_EMAIL_VERIFICATION = 'none'  # For simplicity during development
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_LOGIN_METHODS = {'email'}
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_LOGIN_ON_GET = True  # Skip intermediate pages
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'

# Social Authentication Providers
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.getenv("GOOGLE_CLIENT_ID"),
            'secret': os.getenv("GOOGLE_CLIENT_SECRET"),
            'key': ''
        },
        'SCOPE': ['profile', 'email'],
    },
    'github': {
        'APP': {
            'client_id': os.getenv("GITHUB_CLIENT_ID"),
            'secret': os.getenv("GITHUB_CLIENT_SECRET"),
            'key': ''
        },
        'SCOPE': ['user', 'user:email'],
    }
}

# Login/Logout redirects
LOGIN_REDIRECT_URL = f"{FRONTEND_URL}/auth/success"
ACCOUNT_LOGOUT_REDIRECT_URL = f"{FRONTEND_URL}/login"

# Email settings (if applicable)
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True").lower() in ("true", "1", "t")

# Custom Adapters (if used)
ACCOUNT_ADAPTER = 'caption_backend.adapters.CustomAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'caption_backend.adapters.CustomSocialAccountAdapter'

# Setup default site configuration function
def setup_site():
    """Set up the default site"""
    try:
        from django.db import IntegrityError
        from django.contrib.sites.models import Site
        from allauth.socialaccount.models import SocialApp

        # Get or create the default site
        site, created = Site.objects.get_or_create(
            id=SITE_ID,
            defaults={"domain": "localhost:8000", "name": "Development"}
        )
        if not created and site.domain != "localhost:8000":
            site.domain = "localhost:8000"
            site.name = "Development"
            site.save()

        # Configure Google SocialApp
        try:
            google_app, created = SocialApp.objects.get_or_create(
                provider="google",
                defaults={
                    "name": "Google",
                    "client_id": os.getenv("GOOGLE_CLIENT_ID"),
                    "secret": os.getenv("GOOGLE_CLIENT_SECRET"),
                }
            )
            google_app.sites.add(site)
        except Exception as e:
            print(f"Error configuring Google app: {e}")

        # Configure GitHub SocialApp
        try:
            github_app, created = SocialApp.objects.get_or_create(
                provider="github",
                defaults={
                    "name": "GitHub",
                    "client_id": os.getenv("GITHUB_CLIENT_ID"),
                    "secret": os.getenv("GITHUB_CLIENT_SECRET"),
                }
            )
            github_app.sites.add(site)
        except Exception as e:
            print(f"Error configuring GitHub app: {e}")

    except Exception as e:
        print(f"Site setup error: {e}")

# Call the setup function when app is ready
from django.apps import AppConfig
class ReadyConfig(AppConfig):
    name = 'caption_backend'

    def ready(self):
        try:
            import threading
            if threading.current_thread().name == 'MainThread':
                setup_site()
        except Exception as e:
            print(f"Error in ready(): {e}")
