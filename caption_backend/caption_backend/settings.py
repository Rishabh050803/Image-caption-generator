"""
Django settings for caption_backend project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url 


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@6^101ss7g_h)i8f$zmg5&^$iug1gb#x4dyrpywiu9h&1mfv#!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Django built-ins
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for django-allauth
    
    # REST framework
    'rest_framework',
    'rest_framework.authtoken',
    
    # Authentication
    'dj_rest_auth',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    'dj_rest_auth.registration',
    
    # Your existing apps
    'corsheaders',
    'api',
    
    # Add your app config
    'caption_backend.apps.CaptionBackendConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Required for allauth
]

ROOT_URLCONF = 'caption_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'caption_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases



DATABASES = {
    'default': dj_database_url.parse(
        'postgresql://neondb_owner:npg_EDyM9RdxQc2q@ep-tiny-cake-a8gpo9w5-pooler.eastus2.azure.neon.tech/neondb?sslmode=require',
        conn_max_age=600,  # Keep the connection alive
        ssl_require=True  # Required for NeonDB
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:3001",
    
]
CORS_ALLOW_ALL_ORIGINS = True

# Site ID required by django-allauth
SITE_ID = 1

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    ],
}

# JWT settings
REST_USE_JWT = True
JWT_AUTH_COOKIE = 'auth-token'
JWT_AUTH_REFRESH_COOKIE = 'auth-refresh-token'
JWT_AUTH_SECURE = False  # Set to True in production

# DJ Rest Auth Settings
REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'auth-token',
    'JWT_AUTH_REFRESH_COOKIE': 'refresh-token',
    'JWT_AUTH_SECURE': False,  # Set to True in production
    'JWT_AUTH_HTTPONLY': False,  # For easier development - set to True in production
    'USER_DETAILS_SERIALIZER': 'dj_rest_auth.serializers.UserDetailsSerializer',
    'REGISTER_SERIALIZER': 'caption_backend.serializers.CustomRegisterSerializer',
}

# Add this to your settings
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'caption_backend.serializers.CustomRegisterSerializer',
}

# AllAuth settings
ACCOUNT_EMAIL_VERIFICATION = 'none'  # For simplicity during development
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_UNIQUE_EMAIL = True
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_LOGIN_ON_GET = True  # Skip intermediate pages
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'

# CORS settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:3001",

]
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:3001",
]
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'

# For development only
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_SAMESITE = 'Lax'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': '',  # Replace with your actual client ID
            'secret': '', # Replace with your actual secret
            'key': ''  # Leave empty for Google
        },
        'SCOPE': ['profile', 'email'],
    },
    'github': {
        'APP': {
            'client_id': '',  # Replace with your actual client ID
            'secret': '', # Replace with your actual secret
            'key': ''  # Leave empty for GitHub
        },
        'SCOPE': ['user', 'user:email'],
    }
}

# Add this to your settings (near the other auth settings)
LOGIN_REDIRECT_URL = 'http://localhost:3000/auth/success'  # Frontend callback URL
ACCOUNT_LOGOUT_REDIRECT_URL = 'http://localhost:3000/login'  # Frontend login page

# Add these to your settings
ACCOUNT_ADAPTER = 'caption_backend.adapters.CustomAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'caption_backend.adapters.CustomSocialAccountAdapter'

# Add this at the end of settings.py
def setup_site():
    """Set up the default site"""
    try:
        from django.db import IntegrityError
        from django.contrib.sites.models import Site
        from allauth.socialaccount.models import SocialApp
        
        # Get or create the default site
        site, created = Site.objects.get_or_create(
            id=SITE_ID,
            defaults={"domain": "localhost:8000", "name": "Development"}
        )
        
        if not created and site.domain != "localhost:8000":
            site.domain = "localhost:8000"
            site.name = "Development"
            site.save()
            
        # Configure Google
        try:
            google_app, created = SocialApp.objects.get_or_create(
                provider="google",
                defaults={
                    "name": "Google",
                    "client_id": SOCIALACCOUNT_PROVIDERS['google']['APP']['client_id'],
                    "secret": SOCIALACCOUNT_PROVIDERS['google']['APP']['secret']
                }
            )
            google_app.sites.add(site)
        except Exception as e:
            print(f"Error configuring Google app: {e}")
            
        # Configure GitHub
        try:
            github_app, created = SocialApp.objects.get_or_create(
                provider="github",
                defaults={
                    "name": "GitHub",
                    "client_id": SOCIALACCOUNT_PROVIDERS['github']['APP']['client_id'],
                    "secret": SOCIALACCOUNT_PROVIDERS['github']['APP']['secret']
                }
            )
            github_app.sites.add(site)
        except Exception as e:
            print(f"Error configuring GitHub app: {e}")
            
    except Exception as e:
        print(f"Site setup error: {e}")
        
# Call the setup function when app is ready
from django.apps import AppConfig
class ReadyConfig(AppConfig):
    name = 'caption_backend'
    
    def ready(self):
        try:
            # Important: Only run in main thread
            import threading
            if threading.current_thread().name == 'main_thread':
                setup_site()
        except Exception as e:
            print(f"Error in ready(): {e}")


