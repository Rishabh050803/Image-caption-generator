@startuml System Overview

' Define actors
actor User as user
actor "API Services" as api

' Define main components
rectangle "Frontend (Next.js)" as frontend {
  component "Image Upload" as upload
  component "Caption Generator UI" as capui
  component "Settings Panel" as settings
  component "Results Display" as display
}

rectangle "Backend (FastAPI)" as backend {
  component "Image Processing" as imgprocess
  component "Caption Service" as capservice
  component "Hashtag Service" as hashservice
}

rectangle "AI Models" as models {
  component "Vision Transformer" as vit
  component "T5-Small Decoder" as t5
}

cloud "External APIs" as external {
  component "Groq API" as groq
  component "HuggingFace Spaces API" as hf
}

database "Storage" as db {
  component "Generated Captions" as captions
  component "User Feedback" as feedback
}

' Define relationships
user --> upload : uploads image
upload --> imgprocess : sends image data
imgprocess --> hf : sends for processing
hf --> vit : extracts features
vit --> t5 : generates basic caption
t5 --> capservice : returns caption
settings --> capservice : configures options
capservice --> groq : refines caption/generates hashtags
groq --> capservice : returns enhanced content
capservice --> display : sends final caption
display --> user : shows results
user --> feedback : provides ratings

@enduml



@startuml Sequence Diagram

actor User
participant "Frontend" as FE
participant "Backend" as BE
participant "HuggingFace API" as HF
participant "Groq API" as GROQ
database "Storage" as DB

== Image Upload & Basic Caption ==
User -> FE: Upload Image
activate FE
FE -> BE: POST /upload-image
activate BE
BE -> HF: Request Caption Generation
activate HF
HF --> BE: Basic Caption
deactivate HF
BE --> FE: Return Caption
deactivate BE
FE --> User: Display Basic Caption
deactivate FE

== Advanced Processing (Optional) ==
alt Advanced Mode Selected
    User -> FE: Select Advanced Options
    activate FE
    FE -> BE: POST /refine-caption
    activate BE
    BE -> GROQ: Request Caption Refinement
    activate GROQ
    GROQ --> BE: Refined Caption
    deactivate GROQ
    BE --> FE: Return Refined Caption
    deactivate BE
    FE --> User: Display Refined Caption
    deactivate FE
end

== Hashtag Generation (Optional) ==
alt Hashtags Requested
    User -> FE: Enable Hashtags
    activate FE
    FE -> BE: POST /generate-hashtags
    activate BE
    BE -> GROQ: Request Hashtags
    activate GROQ
    GROQ --> BE: Generated Hashtags
    deactivate GROQ
    BE --> FE: Return Hashtags
    deactivate BE
    FE -> FE: Append Hashtags to Caption
    FE --> User: Display Caption with Hashtags
    deactivate FE
end

== Feedback Collection (Optional) ==
User -> FE: Submit Feedback
activate FE
FE -> BE: POST /save-feedback
activate BE
BE -> DB: Store Feedback
BE --> FE: Confirmation
deactivate BE
FE --> User: Feedback Received
deactivate FE

@enduml

@startuml Class Diagram

class ImageUpload {
  +handleFileChange()
  +validateImage()
  +uploadImage()
}

class CaptionGenerator {
  -isGenerating: boolean
  -generationStep: string
  -selectedModel: string
  +generateBasicCaption()
  +generateAdvancedCaption()
  +generateHashtags()
}

class APIService {
  +captionWithHFAPI()
  +refineWithGroq()
  +generateHashtagsWithGroq()
}

class UserInterface {
  -isDarkMode: boolean
  -caption: string
  +toggleDarkMode()
  +handleModelSelection()
  +handleToneSelection() 
  +displayCaption()
  +editCaption()
}

ImageUpload --> CaptionGenerator: sends image
CaptionGenerator --> APIService: requests processing
APIService --> CaptionGenerator: returns results
CaptionGenerator --> UserInterface: updates display

@enduml

